package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.38

import (
	"context"
	"go-gqlgen/db/operations"
	"go-gqlgen/graph/model"
)

// CreateBook is the resolver for the createBook field.
func (r *mutationResolver) CreateBook(ctx context.Context, input model.NewBook) (*model.Book, error) {
	simulatedAuthor := &model.User{
		ID:   input.UserID,
		Name: input.Name,
	}

	simulatedBook := &model.Book{
		ID:     "some-simulated-id-123",
		Title:  input.Title,
		Author: simulatedAuthor,
	}
	operations.FetchAllUsers()
	return simulatedBook, nil
}

// Books is the resolver for the books field.
func (r *queryResolver) Books(ctx context.Context) ([]*model.Book, error) {
	// Usuarios simulados
	user1 := &model.User{
		ID:   "simulated-user-id-1",
		Name: "Alice",
	}
	user2 := &model.User{
		ID:   "simulated-user-id-2",
		Name: "Bob",
	}

	simulatedBooks := []*model.Book{
		&model.Book{
			ID:     "simulated-id-1",
			Title:  "Simulated Book 1",
			Author: user1,
		},
		&model.Book{
			ID:     "simulated-id-2",
			Title:  "Simulated Book 2",
			Author: user2,
		},
	}

	return simulatedBooks, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
