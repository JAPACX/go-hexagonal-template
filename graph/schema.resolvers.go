package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.38

import (
	"context"
	"errors"
	"go-gqlgen/db/operations"
	"go-gqlgen/graph/model"
)

// CreateBook is the resolver for the createBook field.
func (r *mutationResolver) CreateBook(ctx context.Context, input model.NewBook) (*model.Book, error) {
	simulatedAuthor := &model.User{
		ID:   input.UserID,
		Name: input.Name,
	}

	simulatedBook := &model.Book{
		ID:     "some-simulated-id-123",
		Title:  input.Title,
		Author: simulatedAuthor,
	}
	return simulatedBook, nil
}

// Books is the resolver for the books field.
func (r *queryResolver) Books(ctx context.Context) ([]*model.Book, error) {

	user1 := &model.User{
		ID:   "simulated-user-id-1",
		Name: "Alice",
	}
	user2 := &model.User{
		ID:   "simulated-user-id-2",
		Name: "Bob",
	}

	simulatedBooks := []*model.Book{
		&model.Book{
			ID:     "simulated-id-1",
			Title:  "Simulated Book 1",
			Author: user1,
		},
		&model.Book{
			ID:     "simulated-id-2",
			Title:  "Simulated Book 2",
			Author: user2,
		},
	}

	return simulatedBooks, nil
}

// Users is the resolver for the users field.
func (r *queryResolver) Users(ctx context.Context) ([]*model.User, error) {
	allUsers := operations.FetchAllUsers()

	if len(allUsers) < 1 {
		return nil, errors.New("not enough users")
	}
	var result []*model.User
	for _, element := range allUsers {

		newUser := &model.User{ID: element.Id, Name: element.Name, Email: element.Email}

		result = append(result, newUser)

	}

	return result, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
